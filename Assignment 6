Answer 1:
class Solution {
public:
    vector<int> diStringMatch(string s) {
        int n = s.size();
        int i = 0;
        int j = n;

        vector<int>ans;

        for(int k = 0; k<=n; k++){
            if(s[k]=='I'){
                ans.push_back(i);
                i++;
            }else{
                ans.push_back(j);
                j--;
            }
        }

        if(i == j){
            ans.push_back(i);
        }

        return ans;
    }
};

Answer 2:-
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size(),n=matrix[0].size();
        int l=0,r=m*n-1;

        while(l<=r){
            int mid= l + (r-l)/2;
            if(matrix[mid/n][mid%n]==target) return true;
            else if(matrix[mid/n][mid%n]>target) r=mid-1;
            else l=mid+1;
        }
        return false;
    }
};

Answer 3:-
class Solution {
public:
    bool validMountainArray(vector<int>& arr) {
        if(arr.size()<3) return false;
        int max = INT_MIN;
        int mountain = -1;
        for(int i=0;i<arr.size();i++){
            if(arr[i]>max){
                max=arr[i];
                mountain =i;
            }
        }
        if(mountain==0 || mountain==arr.size()-1) return false;

            for(int i=0; i<mountain; i++){
                if(arr[i]>=arr[i+1]){
                    return false;
                }
            }
            for(int j=mountain+1; j<arr.size(); j++){
                if(arr[j]>=arr[j-1]){
                    return false;
            }
        }
        return true;
    }
};

Answer 4:-
class Solution {
public:
    int findMaxLength(vector<int>& nums) {
		int maxlen = 0;
        for (int i = 0; i < nums.size(); i++) {
            int zeroes = 0, ones = 0;
            for (int j = i; j < nums.size(); j++) {
                if (nums[j] == 0) {
                    zeroes++;
                } else {
                    ones++;
                }
                if (zeroes == ones) {
                    maxlen = max(maxlen, j - i + 1);
                }
            }
        }
        return maxlen;
    }
};

Answer 5:-
#include <algorithm>
#include <vector>

int minProductSum(vector<int>& nums1,vector<int>& nums2) {
    sort(nums1.begin(), nums1.end());
    sort(nums2.begin(), nums2.end());
    int n = nums1.size();
    int left = 0;
    int right = n - 1;
    int min_product_sum = 0;

    while (left <= right) {
        min_product_sum += nums1[left] * nums2[right];
        left++;
        right--;
    }

    return min_product_sum;
}

int main() {
    std::vector<int> nums1 = {5, 3, 4, 2};
    std::vector<int> nums2 = {4, 2, 2, 5};
    int result = minProductSum(nums1, nums2);
    return 0;
}

Answer 6:-
class Solution {
public:
    vector<int> findOriginalArray(vector<int>& changed) {
        if(changed.size()&1){return {};}
        sort(changed.begin(), changed.end());
        vector<int>ans;
        unordered_map<int, int>m;
        for(int i=0; i<changed.size(); i++){
            m[changed[i]]++;
        }
        for(int i=0; i<changed.size(); i++){
            if(m[changed[i]]==0){
                continue;
            }
            m[changed[i]]--;
            if(m[changed[i]*2]==0){
                return {};
            }
            m[changed[i]*2]--;
            ans.push_back(changed[i]);
        }
        return ans;
    }
};

Answer 7:-
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>>res(n,vector<int>(n));
        int top=0;int left=0;
        int right=n-1;int bottom=n-1;
        int a=1;
        while(top<=bottom && left<=right){
            for(int i=left;i<=right;i++){//top
                
                res[top][i]=a;
                a++;
            }
            top++;
            for(int i=top;i<=bottom;i++){//right
                res[i][right]=a;
                a++;
            }
            right--;
            if(top<=bottom){
                for(int i=right;i>=left;i--){//bottom in reverse
                res[bottom][i]=a;
                a++;
            }
            bottom--;
            }
            if(left<=right){
                for(int i=bottom;i>=top;i--){//left in reverse
                res[i][left]=a;
                a++;
            }
            left++;
            }
        }
        return res;
        
    }
};

Answer 8:-
class Solution {
 public:
  vector<vector<int>> multiply(vector<vector<int>>& mat1,
                               vector<vector<int>>& mat2) {
    const int m = mat1.size();
    const int n = mat2.size();
    const int l = mat2[0].size();
    vector<vector<int>> ans(m, vector<int>(l));

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < l; ++j)
        for (int k = 0; k < n; ++k)
          ans[i][j] += mat1[i][k] * mat2[k][j];

    return ans;
  }
};
